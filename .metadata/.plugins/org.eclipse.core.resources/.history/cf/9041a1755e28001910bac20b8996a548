package com.cg.banking.services;

import java.util.List;

import com.cg.banking.beans.Account;
import com.cg.banking.beans.Transaction;
import com.cg.banking.daoservices.AccountDAO;
import com.cg.banking.daoservices.AccountDAOImpl;
import com.cg.banking.daoservices.TransactionDAO;
import com.cg.banking.daoservices.TransactionDAOImpl;
import com.cg.banking.exceptions.AccountBlockedException;
import com.cg.banking.exceptions.AccountNotFoundException;
import com.cg.banking.exceptions.BankingServicesDownException;
import com.cg.banking.exceptions.InsufficientAmountException;
import com.cg.banking.exceptions.InvalidAccountTypeException;
import com.cg.banking.exceptions.InvalidAmountException;
import com.cg.banking.exceptions.InvalidPinNumberException;

public class BankingServicesImpl implements BankingServices {
	
	private AccountDAO accountDao = new AccountDAOImpl();
	private TransactionDAO transactionDao = new TransactionDAOImpl();

	public Account openAccount(String accName, String address, double mobileNo, String emailId, String nomineeName,
			double panIdNo, double voterIdNo, String accountType)
			throws InvalidAmountException, InvalidAccountTypeException, BankingServicesDownException {
	Account account = new Account(accName, address, mobileNo, emailId, nomineeName,
			panIdNo, voterIdNo, accountType);
	account = accountDao.save(account);
	
		return account;
	}

	@Override
	public float depositAmount(long accountNo, float amount)
			throws AccountNotFoundException, BankingServicesDownException, AccountBlockedException {
		Transaction transaction = new Transaction(accountNo,amount);
		transaction = transactionDao.save(transaction);
		
		return transaction.getAmount();
	}

	@Override
	public float withdrawAmount(long accountNo, float amount) throws InsufficientAmountException,
			AccountNotFoundException, InvalidPinNumberException, BankingServicesDownException, AccountBlockedException {
		Transaction transaction = new Transaction(accountNo,amount);
		transaction = transactionDao.save(transaction);
		
		return transaction.getAmount();
	}

	@Override
	public float fundTransfer(long accountNo, float amount)
			throws InsufficientAmountException, AccountNotFoundException, InvalidPinNumberException,
			BankingServicesDownException, AccountBlockedException {
		long toAccountNo;
		Transaction transaction = new Transaction(accountNo,amount);
		transaction = transactionDao.save(transaction);

		return transaction.getAmount();
	}

	@Override
	public Account getAccountDetails(long accountNo) throws AccountNotFoundException, BankingServicesDownException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Account> getAllAccountDetails() throws BankingServicesDownException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Transaction> getAccountAllTransaction(long accountNo)
			throws BankingServicesDownException, AccountNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String accountStatus(long accountNo)
			throws BankingServicesDownException, AccountNotFoundException, AccountBlockedException {
		// TODO Auto-generated method stub
		return null;
	}

}